synchronized的底层实现
JDK早期的 重量级 - OS
后来的改进
锁升级的概念：
    我就是厕所所长 （一 二）

sync (Object)
markword 记录这个线程ID （偏向锁）
如果线程争用：升级为 自旋锁
10次以后，
升级为重量级锁 - OS

----------------------------
synchronized 经过偏向锁/自旋锁优化后 不比AtomicInteger慢
JVM规范没有指定 synchronized 如何实现

AtomicInteger 和各种Lock都是用自旋锁
自旋锁在用户态操作，比OS加锁快，
----------------------------

***** 那么问题来了：什么时候使用自旋锁，什么时候使用OS重量级锁？

执行时间短（加锁代码），线程数少，用自旋
执行时间长，线程数多，用系统锁(用synchronized)

Lock -- 使用自旋锁 CAS
Synchronized -- 使用重量级锁 OS


----------------------------
synchronized(Object o)
 - 不能用 String常量 Integer Long 等基础类型
 - object